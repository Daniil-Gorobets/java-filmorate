CREATE TABLE IF NOT EXISTS USERS
(
    USER_ID       INTEGER AUTO_INCREMENT,
    USER_EMAIL    VARCHAR NOT NULL,
    USER_LOGIN    VARCHAR NOT NULL,
    USER_NAME     VARCHAR NOT NULL,
    USER_BIRTHDAY DATE    NOT NULL,
    CONSTRAINT USERS_USER_ID PRIMARY KEY (USER_ID)
);

CREATE UNIQUE INDEX IF NOT EXISTS USERS_USER_LOGIN_UNQ
    ON USERS (USER_LOGIN);

CREATE UNIQUE INDEX IF NOT EXISTS USERS_USER_EMAIL_UNQ
    ON USERS (USER_EMAIL);

CREATE TABLE IF NOT EXISTS MPA
(
    MPA_ID   INTEGER AUTO_INCREMENT,
    MPA_NAME VARCHAR NOT NULL,
    CONSTRAINT MPA_MPA_ID PRIMARY KEY (MPA_ID)
);

CREATE UNIQUE INDEX IF NOT EXISTS MPA_MPA_NAME_UNQ
    ON MPA (MPA_NAME);

CREATE TABLE IF NOT EXISTS GENRES
(
    GENRE_ID   INTEGER AUTO_INCREMENT,
    GENRE_NAME VARCHAR NOT NULL,
    CONSTRAINT GENRES_GENRE_ID PRIMARY KEY (GENRE_ID)
);

CREATE UNIQUE INDEX IF NOT EXISTS GENRES_GENRE_NAME_UNQ
    ON GENRES (GENRE_NAME);

CREATE TABLE IF NOT EXISTS FILMS
(
    FILM_ID           INTEGER AUTO_INCREMENT,
    FILM_NAME         VARCHAR NOT NULL,
    FILM_DESCRIPTION  VARCHAR(200),
    FILM_RELEASE_DATE DATE    NOT NULL,
    FILM_DURATION     INTEGER NOT NULL,
    FILM_MPA_ID       INTEGER NOT NULL,
    CONSTRAINT FILMS_FILM_ID PRIMARY KEY (FILM_ID),
    CONSTRAINT FILMS_FILM_MPA_ID_FK FOREIGN KEY (FILM_MPA_ID) REFERENCES MPA
);

CREATE TABLE IF NOT EXISTS GENRES_OF_FILMS
(
    GENRE_ID INTEGER NOT NULL,
    FILM_ID  INTEGER NOT NULL,
    CONSTRAINT GENRES_OF_FILMS_PK PRIMARY KEY (GENRE_ID, FILM_ID),
    CONSTRAINT GENRES_OF_FILMS_GENRE_ID_FK FOREIGN KEY (GENRE_ID) REFERENCES GENRES,
    CONSTRAINT GENRES_OF_FILMS_FILM_ID_FK FOREIGN KEY (FILM_ID) REFERENCES FILMS
);

CREATE TABLE IF NOT EXISTS LIKES
(
    FILM_ID INTEGER NOT NULL,
    USER_ID INTEGER NOT NULL,
    CONSTRAINT LIKES_PK PRIMARY KEY (FILM_ID, USER_ID),
    CONSTRAINT LIKES_FILM_ID_FK FOREIGN KEY (FILM_ID) REFERENCES FILMS,
    CONSTRAINT LIKES_USER_ID_FK FOREIGN KEY (USER_ID) REFERENCES USERS
);

CREATE TABLE IF NOT EXISTS FRIENDSHIP
(
    USER_ID        INTEGER NOT NULL,
    USER_FRIEND_ID INTEGER NOT NULL,
    CONSTRAINT FRIENDSHIP_PK PRIMARY KEY (USER_ID, USER_FRIEND_ID),
    CONSTRAINT FRIENDSHIP_USER_ID_FK FOREIGN KEY (USER_ID) REFERENCES USERS,
    CONSTRAINT FRIENDSHIP_USER_FRIEND_ID_FK FOREIGN KEY (USER_FRIEND_ID) REFERENCES USERS
);